version: '3.7'

services:
    django:
        container_name: dj
        build: 
           context: ./server
        restart: unless-stopped
        labels:
           - "traefik.enable=true"
           - "traefik.http.routers.${SERVICE}-api.rule=Host(`api.${DOMAIN_NAME}`)"
           - "traefik.http.routers.${SERVICE}-api.tls.certresolver=letsEncrypt"
           - "traefik.http.routers.${SERVICE}-api.entrypoints=web-secure"
        volumes:
           - staticfiles:/app/staticfiles
           - mediafiles:/app/media
        command: gunicorn khashashin.wsgi:application --bind 0.0.0.0:8000
        env_file: ./server/.env
        expose:
           - 8000
        networks:
           - web
           - django
        depends_on:
           - db
    db:
       container_name: postgres
       image: postgres:12.0-alpine
       restart: unless-stopped
       labels:
          - "traefik.enable=false"
       volumes:
          - postgres_data:/var/lib/postgresql/data/
       env_file: ./db/.env
       networks:
          - django
    pgadmin:
       container_name: pgadmin
       image: dpage/pgadmin4:latest
       restart: unless-stopped
       labels:
          - "traefik.enable=true"
          - "traefik.http.routers.${SERVICE}-pgadmin.rule=Host(`pgadmin.${DOMAIN_NAME}`)"
          - "traefik.http.routers.${SERVICE}-pgadmin.tls.certresolver=letsEncrypt"
          - "traefik.http.routers.${SERVICE}-pgadmin.entrypoints=web-secure"
          - "traefik.http.services.${SERVICE}-pgadmin.loadbalancer.server.port=6553"
       volumes:
          - pgadmin_data:/var/lib/pgadmin
       env_file: ./db/pgadmin/.env
       links:
          - db:pgsql-server
       networks:
          - web
          - django
       depends_on:
          - db
    nginx:
       container_name: nginx
       build:
          context: ./
          dockerfile: Dockerfile
       restart: unless-stopped
       labels:
           - "traefik.enable=true"
           - "traefik.http.routers.${SERVICE}-client.rule=Host(`${DOMAIN_NAME}`) || (Host(`api.${DOMAIN_NAME}`) && PathPrefix(`/static/`))"
           - "traefik.http.routers.${SERVICE}-client.tls.certresolver=letsEncrypt"
           - "traefik.http.routers.${SERVICE}-client.entrypoints=web-secure"
       volumes:
           - staticfiles:/app/staticfiles
           - mediafiles:/app/media
       expose:
           - 80
       networks:
           - web
       depends_on:
           - django

volumes:
    staticfiles: 
    mediafiles:
    postgres_data:
    pgadmin_data:

networks:
    web:
        external: true
    django:
        external: false
